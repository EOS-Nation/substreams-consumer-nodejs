/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,eslint_disable,client_generic
// @generated from protobuf file "sf/substreams/v1/package.proto" (package "sf.substreams.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Modules } from "./modules";
import { FileDescriptorProto } from "../../../google/protobuf/descriptor";
/**
 * @generated from protobuf message sf.substreams.v1.Package
 */
export interface Package {
    /**
     * Needs to be one so this file can be used _directly_ as a
     * buf `Image` andor a ProtoSet for grpcurl and other tools
     *
     * @generated from protobuf field: repeated google.protobuf.FileDescriptorProto proto_files = 1;
     */
    protoFiles: FileDescriptorProto[];
    /**
     * @generated from protobuf field: uint64 version = 5;
     */
    version: string;
    /**
     * @generated from protobuf field: sf.substreams.v1.Modules modules = 6;
     */
    modules?: Modules;
    /**
     * @generated from protobuf field: repeated sf.substreams.v1.ModuleMetadata module_meta = 7;
     */
    moduleMeta: ModuleMetadata[];
    /**
     * @generated from protobuf field: repeated sf.substreams.v1.PackageMetadata package_meta = 8;
     */
    packageMeta: PackageMetadata[];
}
/**
 * @generated from protobuf message sf.substreams.v1.PackageMetadata
 */
export interface PackageMetadata {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string doc = 4;
     */
    doc: string;
}
/**
 * @generated from protobuf message sf.substreams.v1.ModuleMetadata
 */
export interface ModuleMetadata {
    /**
     * Corresponds to the index in `Package.metadata.package_meta`
     *
     * @generated from protobuf field: uint64 package_index = 1;
     */
    packageIndex: string;
    /**
     * @generated from protobuf field: string doc = 2;
     */
    doc: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Package$Type extends MessageType<Package> {
    constructor() {
        super("sf.substreams.v1.Package", [
            { no: 1, name: "proto_files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FileDescriptorProto },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "modules", kind: "message", T: () => Modules },
            { no: 7, name: "module_meta", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ModuleMetadata },
            { no: 8, name: "package_meta", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PackageMetadata }
        ]);
    }
    create(value?: PartialMessage<Package>): Package {
        const message = { protoFiles: [], version: "0", moduleMeta: [], packageMeta: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Package>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Package): Package {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.FileDescriptorProto proto_files */ 1:
                    message.protoFiles.push(FileDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toString();
                    break;
                case /* sf.substreams.v1.Modules modules */ 6:
                    message.modules = Modules.internalBinaryRead(reader, reader.uint32(), options, message.modules);
                    break;
                case /* repeated sf.substreams.v1.ModuleMetadata module_meta */ 7:
                    message.moduleMeta.push(ModuleMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sf.substreams.v1.PackageMetadata package_meta */ 8:
                    message.packageMeta.push(PackageMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Package, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.FileDescriptorProto proto_files = 1; */
        for (let i = 0; i < message.protoFiles.length; i++)
            FileDescriptorProto.internalBinaryWrite(message.protoFiles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 version = 5; */
        if (message.version !== "0")
            writer.tag(5, WireType.Varint).uint64(message.version);
        /* sf.substreams.v1.Modules modules = 6; */
        if (message.modules)
            Modules.internalBinaryWrite(message.modules, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated sf.substreams.v1.ModuleMetadata module_meta = 7; */
        for (let i = 0; i < message.moduleMeta.length; i++)
            ModuleMetadata.internalBinaryWrite(message.moduleMeta[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated sf.substreams.v1.PackageMetadata package_meta = 8; */
        for (let i = 0; i < message.packageMeta.length; i++)
            PackageMetadata.internalBinaryWrite(message.packageMeta[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Package
 */
export const Package = new Package$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackageMetadata$Type extends MessageType<PackageMetadata> {
    constructor() {
        super("sf.substreams.v1.PackageMetadata", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "doc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PackageMetadata>): PackageMetadata {
        const message = { version: "", url: "", name: "", doc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PackageMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackageMetadata): PackageMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string doc */ 4:
                    message.doc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackageMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string doc = 4; */
        if (message.doc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.doc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.PackageMetadata
 */
export const PackageMetadata = new PackageMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModuleMetadata$Type extends MessageType<ModuleMetadata> {
    constructor() {
        super("sf.substreams.v1.ModuleMetadata", [
            { no: 1, name: "package_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "doc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModuleMetadata>): ModuleMetadata {
        const message = { packageIndex: "0", doc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModuleMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModuleMetadata): ModuleMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 package_index */ 1:
                    message.packageIndex = reader.uint64().toString();
                    break;
                case /* string doc */ 2:
                    message.doc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModuleMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 package_index = 1; */
        if (message.packageIndex !== "0")
            writer.tag(1, WireType.Varint).uint64(message.packageIndex);
        /* string doc = 2; */
        if (message.doc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.doc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.ModuleMetadata
 */
export const ModuleMetadata = new ModuleMetadata$Type();
