/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,eslint_disable,client_generic
// @generated from protobuf file "sf/substreams/v1/substreams.proto" (package "sf.substreams.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Stream } from "./substreams";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Response } from "./substreams";
import type { Request } from "./substreams";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sf.substreams.v1.Stream
 */
export interface IStreamClient {
    /**
     * @generated from protobuf rpc: Blocks(sf.substreams.v1.Request) returns (stream sf.substreams.v1.Response);
     */
    blocks(input: Request, options?: RpcOptions): ServerStreamingCall<Request, Response>;
}
/**
 * @generated from protobuf service sf.substreams.v1.Stream
 */
export class StreamClient implements IStreamClient, ServiceInfo {
    typeName = Stream.typeName;
    methods = Stream.methods;
    options = Stream.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Blocks(sf.substreams.v1.Request) returns (stream sf.substreams.v1.Response);
     */
    blocks(input: Request, options?: RpcOptions): ServerStreamingCall<Request, Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Request, Response>("serverStreaming", this._transport, method, opt, input);
    }
}
