/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,eslint_disable,client_generic
// @generated from protobuf file "sf/substreams/v1/modules.proto" (package "sf.substreams.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sf.substreams.v1.Modules
 */
export interface Modules {
    /**
     * @generated from protobuf field: repeated sf.substreams.v1.Module modules = 1;
     */
    modules: Module[];
    /**
     * @generated from protobuf field: repeated sf.substreams.v1.Binary binaries = 2;
     */
    binaries: Binary[];
}
/**
 * Binary represents some code compiled to its binary form.
 *
 * @generated from protobuf message sf.substreams.v1.Binary
 */
export interface Binary {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: bytes content = 2;
     */
    content: Uint8Array;
}
/**
 * @generated from protobuf message sf.substreams.v1.Module
 */
export interface Module {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "kindMap";
        /**
         * @generated from protobuf field: sf.substreams.v1.Module.KindMap kind_map = 2;
         */
        kindMap: Module_KindMap;
    } | {
        oneofKind: "kindStore";
        /**
         * @generated from protobuf field: sf.substreams.v1.Module.KindStore kind_store = 3;
         */
        kindStore: Module_KindStore;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: uint32 binary_index = 4;
     */
    binaryIndex: number;
    /**
     * @generated from protobuf field: string binary_entrypoint = 5;
     */
    binaryEntrypoint: string;
    /**
     * @generated from protobuf field: repeated sf.substreams.v1.Module.Input inputs = 6;
     */
    inputs: Module_Input[];
    /**
     * @generated from protobuf field: sf.substreams.v1.Module.Output output = 7;
     */
    output?: Module_Output;
    /**
     * @generated from protobuf field: uint64 initial_block = 8;
     */
    initialBlock: string;
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.KindMap
 */
export interface Module_KindMap {
    /**
     * @generated from protobuf field: string output_type = 1;
     */
    outputType: string;
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.KindStore
 */
export interface Module_KindStore {
    /**
     * The `update_policy` determines the functions available to mutate the store
     * (like `set()`, `set_if_not_exists()` or `sum()`, etc..) in
     * order to ensure that parallel operations are possible and deterministic
     *
     * Say a store cumulates keys from block 0 to 1M, and a second store
     * cumulates keys from block 1M to 2M. When we want to use this
     * store as a dependency for a downstream module, we will merge the
     * two stores according to this policy.
     *
     * @generated from protobuf field: sf.substreams.v1.Module.KindStore.UpdatePolicy update_policy = 1;
     */
    updatePolicy: Module_KindStore_UpdatePolicy;
    /**
     * @generated from protobuf field: string value_type = 2;
     */
    valueType: string;
}
/**
 * @generated from protobuf enum sf.substreams.v1.Module.KindStore.UpdatePolicy
 */
export enum Module_KindStore_UpdatePolicy {
    /**
     * @generated from protobuf enum value: UPDATE_POLICY_UNSET = 0;
     */
    UNSET = 0,
    /**
     * Provides a store where you can `set()` keys, and the latest key wins
     *
     * @generated from protobuf enum value: UPDATE_POLICY_SET = 1;
     */
    SET = 1,
    /**
     * Provides a store where you can `set_if_not_exists()` keys, and the first key wins
     *
     * @generated from protobuf enum value: UPDATE_POLICY_SET_IF_NOT_EXISTS = 2;
     */
    SET_IF_NOT_EXISTS = 2,
    /**
     * Provides a store where you can `add_*()` keys, where two stores merge by summing its values.
     *
     * @generated from protobuf enum value: UPDATE_POLICY_ADD = 3;
     */
    ADD = 3,
    /**
     * Provides a store where you can `min_*()` keys, where two stores merge by leaving the minimum value.
     *
     * @generated from protobuf enum value: UPDATE_POLICY_MIN = 4;
     */
    MIN = 4,
    /**
     * Provides a store where you can `max_*()` keys, where two stores merge by leaving the maximum value.
     *
     * @generated from protobuf enum value: UPDATE_POLICY_MAX = 5;
     */
    MAX = 5
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.Input
 */
export interface Module_Input {
    /**
     * @generated from protobuf oneof: input
     */
    input: {
        oneofKind: "source";
        /**
         * @generated from protobuf field: sf.substreams.v1.Module.Input.Source source = 1;
         */
        source: Module_Input_Source;
    } | {
        oneofKind: "map";
        /**
         * @generated from protobuf field: sf.substreams.v1.Module.Input.Map map = 2;
         */
        map: Module_Input_Map;
    } | {
        oneofKind: "store";
        /**
         * @generated from protobuf field: sf.substreams.v1.Module.Input.Store store = 3;
         */
        store: Module_Input_Store;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.Input.Source
 */
export interface Module_Input_Source {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string; // ex: "sf.ethereum.type.v1.Block"
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.Input.Map
 */
export interface Module_Input_Map {
    /**
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string; // ex: "block_to_pairs"
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.Input.Store
 */
export interface Module_Input_Store {
    /**
     * @generated from protobuf field: string module_name = 1;
     */
    moduleName: string;
    /**
     * @generated from protobuf field: sf.substreams.v1.Module.Input.Store.Mode mode = 2;
     */
    mode: Module_Input_Store_Mode;
}
/**
 * @generated from protobuf enum sf.substreams.v1.Module.Input.Store.Mode
 */
export enum Module_Input_Store_Mode {
    /**
     * @generated from protobuf enum value: UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: GET = 1;
     */
    GET = 1,
    /**
     * @generated from protobuf enum value: DELTAS = 2;
     */
    DELTAS = 2
}
/**
 * @generated from protobuf message sf.substreams.v1.Module.Output
 */
export interface Module_Output {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Modules$Type extends MessageType<Modules> {
    constructor() {
        super("sf.substreams.v1.Modules", [
            { no: 1, name: "modules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Module },
            { no: 2, name: "binaries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Binary }
        ]);
    }
    create(value?: PartialMessage<Modules>): Modules {
        const message = { modules: [], binaries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Modules>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Modules): Modules {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sf.substreams.v1.Module modules */ 1:
                    message.modules.push(Module.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sf.substreams.v1.Binary binaries */ 2:
                    message.binaries.push(Binary.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Modules, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sf.substreams.v1.Module modules = 1; */
        for (let i = 0; i < message.modules.length; i++)
            Module.internalBinaryWrite(message.modules[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated sf.substreams.v1.Binary binaries = 2; */
        for (let i = 0; i < message.binaries.length; i++)
            Binary.internalBinaryWrite(message.binaries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Modules
 */
export const Modules = new Modules$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Binary$Type extends MessageType<Binary> {
    constructor() {
        super("sf.substreams.v1.Binary", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Binary>): Binary {
        const message = { type: "", content: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Binary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Binary): Binary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* bytes content */ 2:
                    message.content = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Binary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* bytes content = 2; */
        if (message.content.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Binary
 */
export const Binary = new Binary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module$Type extends MessageType<Module> {
    constructor() {
        super("sf.substreams.v1.Module", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind_map", kind: "message", oneof: "kind", T: () => Module_KindMap },
            { no: 3, name: "kind_store", kind: "message", oneof: "kind", T: () => Module_KindStore },
            { no: 4, name: "binary_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "binary_entrypoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "inputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Module_Input },
            { no: 7, name: "output", kind: "message", T: () => Module_Output },
            { no: 8, name: "initial_block", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<Module>): Module {
        const message = { name: "", kind: { oneofKind: undefined }, binaryIndex: 0, binaryEntrypoint: "", inputs: [], initialBlock: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module): Module {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* sf.substreams.v1.Module.KindMap kind_map */ 2:
                    message.kind = {
                        oneofKind: "kindMap",
                        kindMap: Module_KindMap.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).kindMap)
                    };
                    break;
                case /* sf.substreams.v1.Module.KindStore kind_store */ 3:
                    message.kind = {
                        oneofKind: "kindStore",
                        kindStore: Module_KindStore.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).kindStore)
                    };
                    break;
                case /* uint32 binary_index */ 4:
                    message.binaryIndex = reader.uint32();
                    break;
                case /* string binary_entrypoint */ 5:
                    message.binaryEntrypoint = reader.string();
                    break;
                case /* repeated sf.substreams.v1.Module.Input inputs */ 6:
                    message.inputs.push(Module_Input.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* sf.substreams.v1.Module.Output output */ 7:
                    message.output = Module_Output.internalBinaryRead(reader, reader.uint32(), options, message.output);
                    break;
                case /* uint64 initial_block */ 8:
                    message.initialBlock = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* sf.substreams.v1.Module.KindMap kind_map = 2; */
        if (message.kind.oneofKind === "kindMap")
            Module_KindMap.internalBinaryWrite(message.kind.kindMap, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* sf.substreams.v1.Module.KindStore kind_store = 3; */
        if (message.kind.oneofKind === "kindStore")
            Module_KindStore.internalBinaryWrite(message.kind.kindStore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 binary_index = 4; */
        if (message.binaryIndex !== 0)
            writer.tag(4, WireType.Varint).uint32(message.binaryIndex);
        /* string binary_entrypoint = 5; */
        if (message.binaryEntrypoint !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.binaryEntrypoint);
        /* repeated sf.substreams.v1.Module.Input inputs = 6; */
        for (let i = 0; i < message.inputs.length; i++)
            Module_Input.internalBinaryWrite(message.inputs[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* sf.substreams.v1.Module.Output output = 7; */
        if (message.output)
            Module_Output.internalBinaryWrite(message.output, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* uint64 initial_block = 8; */
        if (message.initialBlock !== "0")
            writer.tag(8, WireType.Varint).uint64(message.initialBlock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module
 */
export const Module = new Module$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_KindMap$Type extends MessageType<Module_KindMap> {
    constructor() {
        super("sf.substreams.v1.Module.KindMap", [
            { no: 1, name: "output_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module_KindMap>): Module_KindMap {
        const message = { outputType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_KindMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_KindMap): Module_KindMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string output_type */ 1:
                    message.outputType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_KindMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string output_type = 1; */
        if (message.outputType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.outputType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.KindMap
 */
export const Module_KindMap = new Module_KindMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_KindStore$Type extends MessageType<Module_KindStore> {
    constructor() {
        super("sf.substreams.v1.Module.KindStore", [
            { no: 1, name: "update_policy", kind: "enum", T: () => ["sf.substreams.v1.Module.KindStore.UpdatePolicy", Module_KindStore_UpdatePolicy, "UPDATE_POLICY_"] },
            { no: 2, name: "value_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module_KindStore>): Module_KindStore {
        const message = { updatePolicy: 0, valueType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_KindStore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_KindStore): Module_KindStore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sf.substreams.v1.Module.KindStore.UpdatePolicy update_policy */ 1:
                    message.updatePolicy = reader.int32();
                    break;
                case /* string value_type */ 2:
                    message.valueType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_KindStore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sf.substreams.v1.Module.KindStore.UpdatePolicy update_policy = 1; */
        if (message.updatePolicy !== 0)
            writer.tag(1, WireType.Varint).int32(message.updatePolicy);
        /* string value_type = 2; */
        if (message.valueType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.valueType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.KindStore
 */
export const Module_KindStore = new Module_KindStore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_Input$Type extends MessageType<Module_Input> {
    constructor() {
        super("sf.substreams.v1.Module.Input", [
            { no: 1, name: "source", kind: "message", oneof: "input", T: () => Module_Input_Source },
            { no: 2, name: "map", kind: "message", oneof: "input", T: () => Module_Input_Map },
            { no: 3, name: "store", kind: "message", oneof: "input", T: () => Module_Input_Store }
        ]);
    }
    create(value?: PartialMessage<Module_Input>): Module_Input {
        const message = { input: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_Input>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_Input): Module_Input {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sf.substreams.v1.Module.Input.Source source */ 1:
                    message.input = {
                        oneofKind: "source",
                        source: Module_Input_Source.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).source)
                    };
                    break;
                case /* sf.substreams.v1.Module.Input.Map map */ 2:
                    message.input = {
                        oneofKind: "map",
                        map: Module_Input_Map.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).map)
                    };
                    break;
                case /* sf.substreams.v1.Module.Input.Store store */ 3:
                    message.input = {
                        oneofKind: "store",
                        store: Module_Input_Store.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).store)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_Input, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sf.substreams.v1.Module.Input.Source source = 1; */
        if (message.input.oneofKind === "source")
            Module_Input_Source.internalBinaryWrite(message.input.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sf.substreams.v1.Module.Input.Map map = 2; */
        if (message.input.oneofKind === "map")
            Module_Input_Map.internalBinaryWrite(message.input.map, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* sf.substreams.v1.Module.Input.Store store = 3; */
        if (message.input.oneofKind === "store")
            Module_Input_Store.internalBinaryWrite(message.input.store, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.Input
 */
export const Module_Input = new Module_Input$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_Input_Source$Type extends MessageType<Module_Input_Source> {
    constructor() {
        super("sf.substreams.v1.Module.Input.Source", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module_Input_Source>): Module_Input_Source {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_Input_Source>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_Input_Source): Module_Input_Source {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_Input_Source, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.Input.Source
 */
export const Module_Input_Source = new Module_Input_Source$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_Input_Map$Type extends MessageType<Module_Input_Map> {
    constructor() {
        super("sf.substreams.v1.Module.Input.Map", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module_Input_Map>): Module_Input_Map {
        const message = { moduleName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_Input_Map>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_Input_Map): Module_Input_Map {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_Input_Map, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.Input.Map
 */
export const Module_Input_Map = new Module_Input_Map$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_Input_Store$Type extends MessageType<Module_Input_Store> {
    constructor() {
        super("sf.substreams.v1.Module.Input.Store", [
            { no: 1, name: "module_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mode", kind: "enum", T: () => ["sf.substreams.v1.Module.Input.Store.Mode", Module_Input_Store_Mode] }
        ]);
    }
    create(value?: PartialMessage<Module_Input_Store>): Module_Input_Store {
        const message = { moduleName: "", mode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_Input_Store>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_Input_Store): Module_Input_Store {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_name */ 1:
                    message.moduleName = reader.string();
                    break;
                case /* sf.substreams.v1.Module.Input.Store.Mode mode */ 2:
                    message.mode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_Input_Store, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_name = 1; */
        if (message.moduleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleName);
        /* sf.substreams.v1.Module.Input.Store.Mode mode = 2; */
        if (message.mode !== 0)
            writer.tag(2, WireType.Varint).int32(message.mode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.Input.Store
 */
export const Module_Input_Store = new Module_Input_Store$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module_Output$Type extends MessageType<Module_Output> {
    constructor() {
        super("sf.substreams.v1.Module.Output", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Module_Output>): Module_Output {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Module_Output>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module_Output): Module_Output {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module_Output, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.Module.Output
 */
export const Module_Output = new Module_Output$Type();
