/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter generate_dependencies,long_type_string,eslint_disable,client_generic,ts_nocheck
// @generated from protobuf file "sf/substreams/v1/test/test.proto" (package "sf.substreams.v1.test", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sf.substreams.v1.test.Block
 */
export interface Block {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 number = 2;
     */
    number: string;
}
/**
 * @generated from protobuf message sf.substreams.v1.test.MapResult
 */
export interface MapResult {
    /**
     * @generated from protobuf field: uint64 block_number = 1;
     */
    blockNumber: string;
    /**
     * @generated from protobuf field: string block_hash = 2;
     */
    blockHash: string;
}
/**
 * @generated from protobuf message sf.substreams.v1.test.Boolean
 */
export interface Boolean$ {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType<Block> {
    constructor() {
        super("sf.substreams.v1.test.Block", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<Block>): Block {
        const message = { id: "", number: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Block): Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* uint64 number */ 2:
                    message.number = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* uint64 number = 2; */
        if (message.number !== "0")
            writer.tag(2, WireType.Varint).uint64(message.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.test.Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapResult$Type extends MessageType<MapResult> {
    constructor() {
        super("sf.substreams.v1.test.MapResult", [
            { no: 1, name: "block_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "block_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MapResult>): MapResult {
        const message = { blockNumber: "0", blockHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MapResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MapResult): MapResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 block_number */ 1:
                    message.blockNumber = reader.uint64().toString();
                    break;
                case /* string block_hash */ 2:
                    message.blockHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MapResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 block_number = 1; */
        if (message.blockNumber !== "0")
            writer.tag(1, WireType.Varint).uint64(message.blockNumber);
        /* string block_hash = 2; */
        if (message.blockHash !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.blockHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.test.MapResult
 */
export const MapResult = new MapResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Boolean$$Type extends MessageType<Boolean$> {
    constructor() {
        super("sf.substreams.v1.test.Boolean", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Boolean$>): Boolean$ {
        const message = { result: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Boolean$>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Boolean$): Boolean$ {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Boolean$, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sf.substreams.v1.test.Boolean
 */
export const Boolean$ = new Boolean$$Type();
